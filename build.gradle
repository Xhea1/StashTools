buildscript {
    dependencies {
        // OkHttp for making HTTP requests
        classpath 'com.squareup.okhttp3:okhttp:4.12.0'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id "com.github.ben-manes.versions" version "0.51.0"
}

group = 'com.github.xhea1'
version = '1.0.0'
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'com.github.xhea1.stashtools.app.AddMetadataApp'
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:33.3.1-jre'

    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'

    implementation 'info.picocli:picocli:4.7.6'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.6'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'

    api "org.jspecify:jspecify:1.0.0"

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.4'
}

test {
    useJUnitPlatform()
}

// Task to download GraphQL schema from a GitHub repository
tasks.register('downloadSchema') {
    def schemaUrl = "https://raw.githubusercontent.com/stashapp/stash/$stashVersion/graphql/schema/schema.graphql"
    def schemaFile = file("graphql/stash/schema.graphqls")
    inputs.property("stashVersion", stashVersion)
    outputs.file(schemaFile)
    description 'Convenience task to download the current Stash GraphQL schema from GitHub. The downloaded version is determined by the "stashVersion" property.'
    finalizedBy('downloadTypes')

    doLast {
        println "Downloading GraphQL schema from GitHub..."
        ant.get(src: schemaUrl, dest: schemaFile)
    }
}

import okhttp3.OkHttpClient;
import okhttp3.Request;
import groovy.json.JsonSlurper;

// Task to download GraphQL types from GitHub dynamically
tasks.register('downloadTypes') {
    def typesDir = file("graphql/stash/types")
    mustRunAfter(tasks.named('downloadSchema'))
    inputs.property("stashVersion", stashVersion)
    outputs.dir(typesDir)

    doLast {
        println "Downloading GraphQL types from GitHub..."

        if (!typesDir.exists()) {
            typesDir.mkdirs()
        }

        // GitHub API URL to list files in the directory
        def apiUrl = "https://api.github.com/repos/stashapp/stash/contents/graphql/schema/types?ref=$stashVersion"

        OkHttpClient client = new OkHttpClient()
        Request request = new Request.Builder().url(apiUrl).build()
        def response = client.newCall(request).execute()

        if (response.isSuccessful()) {
            def jsonSlurper = new JsonSlurper()
            def files = jsonSlurper.parseText(response.body().string())
            files.each { file ->
                if (file.type == "file" && file.name.endsWith(".graphql")) {
                    def fileUrl = file.download_url
                    // we need to ensure the type files have the .graphqls extension, otherwise plugins try to parse them as queries
                    def destFile = new File(typesDir, file.name+'s')
                    logger.info("Downloading ${fileUrl} to ${destFile}")
                    ant.get(src: fileUrl, dest: destFile)
                }
            }
        } else {
            throw new RuntimeException("Failed to fetch file list from GitHub: ${response.message()}")
        }
    }
}


// dependency updates configuration:
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
