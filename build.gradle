buildscript {
    dependencies {
        // OkHttp for making HTTP requests
        classpath 'com.squareup.okhttp3:okhttp:4.12.0'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id "net.ltgt.errorprone" version "4.0.1"
    id 'org.openjfx.javafxplugin' version '0.1.0' // JavaFX plugin for Gradle
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'com.apollographql.apollo' version '4.0.0' // Apply the Apollo plugin
}

group = 'com.example'
version = '1.0.0'
java{
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

mainClassName = 'com.example.MainApp'

repositories {
    mavenCentral()
    google()
}

dependencies {
    // JavaFX dependencies
    implementation 'org.openjfx:javafx-controls:21.0.4'
    implementation 'org.openjfx:javafx-fxml:21.0.4'
    implementation 'org.openjfx:javafx-media:21.0.4'

    // OpenCV dependency (using JavaCV)
    implementation 'org.bytedeco:javacv-platform:1.5.10'
    implementation 'org.bytedeco:opencv-platform:4.9.0-1.5.10'

    // DeepLearning4J core dependency
    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-beta7'

    // ND4J native platform dependency (handles the computation backend)
    implementation 'org.nd4j:nd4j-native-platform:1.0.0-beta7'

    // Apollo GraphQL Client dependencies
    implementation 'com.apollographql.apollo:apollo-runtime:4.0.0'
    implementation 'com.apollographql.apollo:apollo-api:4.0.0'
    implementation 'com.apollographql.apollo:apollo-rx3-support:4.0.0'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:33.3.0-jre'

    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'

    errorprone "com.uber.nullaway:nullaway:0.11.2"
    api "org.jspecify:jspecify:1.0.0"
    errorprone "com.google.errorprone:error_prone_core:2.30.0"

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
}

javafx {
    version = '21.0.4'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

test {
    useJUnitPlatform()
}

// Apollo plugin configuration
apollo {
    service("stash") {
        packageName.set('com.github.xhea1.graphql')
        srcDir(file('src/main/graphql/stash'))

        outputDirConnection {
            connectToJavaSourceSet('main')
        }

        useSemanticNaming.set(true)
    }
    // Make IDEA aware of codegen and run it during your Gradle Sync
    generateSourcesDuringGradleSync.set(true)
}

// Task to download GraphQL schema from a GitHub repository
tasks.register('downloadSchema') {
    def schemaUrl = "https://raw.githubusercontent.com/stashapp/stash/$stashVersion/graphql/schema/schema.graphql"
    def schemaFile = file("src/main/graphql/stash/schema.graphqls")

    doLast {
        println "Downloading GraphQL schema from GitHub..."
        ant.get(src: schemaUrl, dest: schemaFile)
    }
}

import okhttp3.OkHttpClient;
import okhttp3.Request;
import groovy.json.JsonSlurper;

// Task to download GraphQL types from GitHub dynamically
tasks.register('downloadTypes') {
    def typesDir = file("src/main/graphql/stash/types")

    doLast {
        println "Downloading GraphQL types from GitHub..."

        if (!typesDir.exists()) {
            typesDir.mkdirs()
        }

        // GitHub API URL to list files in the directory
        def apiUrl = "https://api.github.com/repos/stashapp/stash/contents/graphql/schema/types?ref=$stashVersion"

        OkHttpClient client = new OkHttpClient()
        Request request = new Request.Builder().url(apiUrl).build()
        def response = client.newCall(request).execute()

        if (response.isSuccessful()) {
            def jsonSlurper = new JsonSlurper()
            def files = jsonSlurper.parseText(response.body().string())
            files.each { file ->
                if (file.type == "file" && file.name.endsWith(".graphql")) {
                    def fileUrl = file.download_url
                    // we need to ensure the type files have the .graphqls extension, otherwise the plugin tries to parse them as queries
                    def destFile = new File(typesDir, file.name+'s')
                    logger.info("Downloading ${fileUrl} to ${destFile}")
                    ant.get(src: fileUrl, dest: destFile)
                }
            }
        } else {
            throw new RuntimeException("Failed to fetch file list from GitHub: ${response.message()}")
        }
    }
}

// Ensure both schema and types are downloaded before generating Apollo sources
generateApolloSources.dependsOn downloadSchema, downloadTypes

import net.ltgt.gradle.errorprone.CheckSeverity

// configure NullAway
tasks.withType(JavaCompile).configureEach {
    // do not run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.github.xhea1")
        }
    }
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

// dependency updates configuration:

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
